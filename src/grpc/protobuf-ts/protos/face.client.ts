// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "protos/face.proto" (package "face", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Face } from "./face";
import type { RegisterByImageRequest } from "./face";
import type { ImageMessage } from "./face";
import type { ResFace } from "./face";
import type { GetUrlFaceByUserRequest } from "./face";
import type { GetUrlDeviceIdRequest } from "./face";
import type { GetFaceUuidRequest } from "./face";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Res } from "./face";
import type { GetEmptyRequest } from "./face";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service face.Face
 */
export interface IFaceClient {
    /**
     *  rpc getVersion(GetEmptyRequest) returns (ResVersion) {}
     * / 基础
     * 验证人脸API接口是否可用状态
     *
     * @generated from protobuf rpc: GetFaceApiStatus(face.GetEmptyRequest) returns (face.Res);
     */
    getFaceApiStatus(input: GetEmptyRequest, options?: RpcOptions): UnaryCall<GetEmptyRequest, Res>;
    /**
     * 清除人脸注册(face.uuid)
     *
     * @generated from protobuf rpc: UnRegisterFace(face.GetFaceUuidRequest) returns (face.Res);
     */
    unRegisterFace(input: GetFaceUuidRequest, options?: RpcOptions): UnaryCall<GetFaceUuidRequest, Res>;
    /**
     * 对比人脸特征值
     *
     * @generated from protobuf rpc: CompareFaceFeature(face.GetUrlDeviceIdRequest) returns (face.Res);
     */
    compareFaceFeature(input: GetUrlDeviceIdRequest, options?: RpcOptions): UnaryCall<GetUrlDeviceIdRequest, Res>;
    /**
     * / 扩展
     * 清除人脸注册(face.uuid)
     *
     * @generated from protobuf rpc: DeleteFaceByUser(face.GetUrlFaceByUserRequest) returns (face.Res);
     */
    deleteFaceByUser(input: GetUrlFaceByUserRequest, options?: RpcOptions): UnaryCall<GetUrlFaceByUserRequest, Res>;
    /**
     * 根据人员信息获取人脸特征和照片
     *
     * @generated from protobuf rpc: GetFaceByUser(face.GetUrlFaceByUserRequest) returns (face.ResFace);
     */
    getFaceByUser(input: GetUrlFaceByUserRequest, options?: RpcOptions): UnaryCall<GetUrlFaceByUserRequest, ResFace>;
    /**
     * 上传人脸图片
     *
     * @generated from protobuf rpc: UploadImage(face.ImageMessage) returns (face.Res);
     */
    uploadImage(input: ImageMessage, options?: RpcOptions): UnaryCall<ImageMessage, Res>;
    /**
     * 根据图片注册
     *
     * TODO: 遍历所在环境的所有设备，查看是否提供人脸API
     *
     * @generated from protobuf rpc: RegisterByImage(face.RegisterByImageRequest) returns (face.Res);
     */
    registerByImage(input: RegisterByImageRequest, options?: RpcOptions): UnaryCall<RegisterByImageRequest, Res>;
}
/**
 * @generated from protobuf service face.Face
 */
export class FaceClient implements IFaceClient, ServiceInfo {
    typeName = Face.typeName;
    methods = Face.methods;
    options = Face.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     *  rpc getVersion(GetEmptyRequest) returns (ResVersion) {}
     * / 基础
     * 验证人脸API接口是否可用状态
     *
     * @generated from protobuf rpc: GetFaceApiStatus(face.GetEmptyRequest) returns (face.Res);
     */
    getFaceApiStatus(input: GetEmptyRequest, options?: RpcOptions): UnaryCall<GetEmptyRequest, Res> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetEmptyRequest, Res>("unary", this._transport, method, opt, input);
    }
    /**
     * 清除人脸注册(face.uuid)
     *
     * @generated from protobuf rpc: UnRegisterFace(face.GetFaceUuidRequest) returns (face.Res);
     */
    unRegisterFace(input: GetFaceUuidRequest, options?: RpcOptions): UnaryCall<GetFaceUuidRequest, Res> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetFaceUuidRequest, Res>("unary", this._transport, method, opt, input);
    }
    /**
     * 对比人脸特征值
     *
     * @generated from protobuf rpc: CompareFaceFeature(face.GetUrlDeviceIdRequest) returns (face.Res);
     */
    compareFaceFeature(input: GetUrlDeviceIdRequest, options?: RpcOptions): UnaryCall<GetUrlDeviceIdRequest, Res> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUrlDeviceIdRequest, Res>("unary", this._transport, method, opt, input);
    }
    /**
     * / 扩展
     * 清除人脸注册(face.uuid)
     *
     * @generated from protobuf rpc: DeleteFaceByUser(face.GetUrlFaceByUserRequest) returns (face.Res);
     */
    deleteFaceByUser(input: GetUrlFaceByUserRequest, options?: RpcOptions): UnaryCall<GetUrlFaceByUserRequest, Res> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUrlFaceByUserRequest, Res>("unary", this._transport, method, opt, input);
    }
    /**
     * 根据人员信息获取人脸特征和照片
     *
     * @generated from protobuf rpc: GetFaceByUser(face.GetUrlFaceByUserRequest) returns (face.ResFace);
     */
    getFaceByUser(input: GetUrlFaceByUserRequest, options?: RpcOptions): UnaryCall<GetUrlFaceByUserRequest, ResFace> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUrlFaceByUserRequest, ResFace>("unary", this._transport, method, opt, input);
    }
    /**
     * 上传人脸图片
     *
     * @generated from protobuf rpc: UploadImage(face.ImageMessage) returns (face.Res);
     */
    uploadImage(input: ImageMessage, options?: RpcOptions): UnaryCall<ImageMessage, Res> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ImageMessage, Res>("unary", this._transport, method, opt, input);
    }
    /**
     * 根据图片注册
     *
     * TODO: 遍历所在环境的所有设备，查看是否提供人脸API
     *
     * @generated from protobuf rpc: RegisterByImage(face.RegisterByImageRequest) returns (face.Res);
     */
    registerByImage(input: RegisterByImageRequest, options?: RpcOptions): UnaryCall<RegisterByImageRequest, Res> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterByImageRequest, Res>("unary", this._transport, method, opt, input);
    }
}
